from .lsf_runner import GpuParameters, Job, resource_requirements, resource_usage, run_job, span_parameters


def run_python(
    script: str,
    queue: str,
    tasks_number: int = 1,
    *,
    job_name: str | None = None,
    resource_requirements: str | None = None,
    gpu_parameters: str | None = None,
    conda_environment: str = None,
    output_file: str | None = None,
    mpi_command: str = 'mpirun',
    **kwargs,
) -> Job:
    """_summary_

    Parameters
    ----------
    script : str
        path to the script, e.g. "test.py"
    queue : str
        the LSF queue to submit the job to
    tasks_number : int, optional
        number of MPI tasks, by default 1
    job_name : str | None, optional
        the name of the job, by default will use the name of the script
    resource_requirements : str | None, optional
        Resource requirements (can be generated by the `resource_requirements` method), by default None
    gpu_parameters : str | None, optional
        GPU parameters (can be generated by using `GpuParameters` class), by default None
    conda_environment : str, optional
        switches to a specific environment at the beginning of the job, by default None (submit the job without changing environment)
    output_file : str | None, optional
        The log file, by default None
    mpi_command : str, optional
        the MPI command to use, by default 'mpirun'

    Also accepts any of the arguments of the generic `run_job` method.

    Returns
    -------
    Job
        the Job object representing the submitted job

    """
    if job_name is None:
        job_name = script

    if tasks_number > 1:
        script = f'{mpi_command} -n {tasks_number} python {script}'
    elif tasks_number == 1:
        script = f'python {script}'
    else:
        raise ValueError('Invalid tasks number')

    if conda_environment is not None:
        script = '; '.join(
            [
                'source ~/miniconda3/etc/profile.d/conda.sh',
                f'conda activate {conda_environment}',
                script,
            ]
        )

    return run_job(
        script,
        tasks_number,
        job_name,
        queue,
        use_gpu=True,
        gpu_parameters=gpu_parameters,
        resource_requirements=resource_requirements,
        output_file=output_file,
        **kwargs,
    )


def run_fbpic(
    script: str,
    queue: str,
    tasks_number: int = 1,
    *,
    job_name: str = 'fbpic',
    memory: str = '10G',
    gpu_memory: str | None = None,
    conda_environment: str | None = None,
    output_file: str | None = None,
    select: str | None = None,
    **kwargs,
) -> Job:
    """Preset for running FBPIC simulations

    Parameters
    ----------
    script : str
        the path to the FBPIC script, e.g. "./laser_test.py"
    queue : str
        the LSF queue to submit the job to
    tasks_number : int, optional
        number of MPI tasks, by default 1
    job_name : str, optional
        the name of the job, by default 'fbpic'
    memory : str, optional
        RAM usage, by default '10G'
    gpu_memory : str | None, optional
        GPU memory usage, by default None
    conda_environment : str | None, optional
        switches to a specific environment at the beginning of the job, by default None (submit the job without changing environment)
    output_file : str | None, optional
        The log file, by default None
    select : str | None, optional
        select string, by default None

    Also accepts any of the arguments of the generic `run_job` method.

    Returns
    -------
    Job
        the Job object representing the submitted job
    """
    gpu_parameters = GpuParameters(1, job_exclusive=True, memory_required=gpu_memory, mode='exclusive_process')
    resources = resource_requirements(
        span=span_parameters(hosts=1),
        affinity='thread*1',
        resource_usage=resource_usage(memory=memory),
        select=select,
    )

    run_python(
        script,
        queue,
        tasks_number,
        job_name=job_name,
        resource_requirements=resources,
        gpu_parameters=gpu_parameters,
        conda_environment=conda_environment,
        output_file=output_file,
        **kwargs,
    )
